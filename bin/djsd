#!/usr/bin/env ruby

daemon_mode = false

if (%w( -h --help -help help ) & ARGV).length > 0
  puts "usage: djsd [-hvd]"
  puts "option(s):"
  puts "-d | daemon mode (background)"
  puts "starts dotjs server in the foreground. kill with ^C"
  exit
end

if ARGV.include?('-v')
  puts "djsd 2.0"
  exit
end

if ARGV.include?('-d')
  daemon_mode = true
end

require 'webrick'
require 'webrick/https'

dotjs = Class.new(WEBrick::HTTPServlet::AbstractServlet) do
  def do_GET(request, response)
    body = build_body(request.path)

    response.status = body.empty? ? 204 : 200
    if origin = detect_origin(request)
      response['Access-Control-Allow-Origin'] = origin
    end
    response['Content-Type'] = 'text/javascript'
    response.body = body
  end

  def build_body(path)
    files = [File.expand_path("~/.js/default.js")]
    paths = path.gsub('/','').split('.')

    until paths.empty?
      file = File.expand_path("~/.js/#{paths.join('.')}")
      files << file if File.file?(file)
      paths.shift
    end

    body = "// dotjs is working! //\n"

    files.each do |file|
      body << File.read(file) + "\n" if File.file?(file)
    end

    body
  end

  def detect_origin(req)
    path   = req.path
    origin = req.header['origin']
    search = path.gsub('/','').gsub(/\.js$/,'') + '$'

    if origin.length == 1 && path.length != 1 && origin[0].match(search)
      origin[0]
    end
  end
end

ssl_info = DATA.read
ssl_cert = ssl_info.scan(/(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)/m)[0][0]
ssl_key  = ssl_info.scan(/(-----BEGIN RSA PRIVATE KEY-----.+?-----END RSA PRIVATE KEY-----)/m)[0][0]

server_options = {
  :BindAddress => "127.0.0.1",
  :Port => 3131,
  :AccessLog => [],
  :SSLEnable => true,
  :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,
  :SSLPrivateKey => OpenSSL::PKey::RSA.new(ssl_key),
  :SSLCertificate => OpenSSL::X509::Certificate.new(ssl_cert),
  :SSLCertName => [["CN", WEBrick::Utils::getservername]],
}

if daemon_mode
  server_options[:ServerType] = WEBrick::Daemon
end

server = WEBrick::HTTPServer.new(server_options)
server.mount('/', dotjs)

%w( INT TERM ).each do |sig|
  trap(sig) { server.shutdown }
end

server.start

__END__
-----BEGIN CERTIFICATE-----
MIIDMDCCAhgCCQDE2XeNsbNGwTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ
TjEMMAoGA1UECAwDTUhSMQ0wCwYDVQQHDARQVU5FMQwwCgYDVQQKDANKQUsxDDAK
BgNVBAsMA0RldjESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTEzMDQxMjA4MTI1NVoX
DTE0MDQxMjA4MTI1NVowWjELMAkGA1UEBhMCSU4xDDAKBgNVBAgMA01IUjENMAsG
A1UEBwwEUFVORTEMMAoGA1UECgwDSkFLMQwwCgYDVQQLDANEZXYxEjAQBgNVBAMM
CWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMYpE1a/
ckfvLIZydiRs5L/gOYKiG6Ozs3jHmA1gQdOGKlf6W9StZYBRQKKOu2FRpabNZZ81
mGaAy3Ln3Bl2Ufg4kkzaozTT83JRUIz/XySzSm0h325x0k8SL2EE+3lrgtUTUN8j
nHUxRcveb4AmdbP3C23GTaJb7gJNSdtfi5Qbuq/srIrxyw4UkKhRlE4pgbAOgLfR
v1SMETrB3YxQKXMIN9ffusAJ3sD3ABAPNOTRE1cPIGollX0YLNS4CjnMHFISTvOd
qJatKJTObY+BKhwZhvvR348+Y13kxCwKHazGjisoaKmRrVgGdwx5dG21YvqfPUwo
cwgf7SQWzy8z+E8CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAqb/k+FvQYkB83nDA
/hMG9z5oo8oghlSH59CCIH+Xurxa+rCBTtZ0E9LRZilOSuLI0Z0Ts6TsYMAVcno/
xqY9vwHnd7+lLOlVL8r6PGDprXNfgtzbVpp2cZIAgqVUSq5e8xSeGZ+Cvr7o06lI
gyo5dTPd6udpLt9/dHJX/mbxBdfq5q9NhoJ7Arp5g8SEUHn/ZtNP6Pzat+jratbJ
6aFL7uBVkpOWdTwcOohhwBCfQ3tKeDOhVJshWebKwT33QBH8QsTF7MOamxehPDyu
JP8Ul9XtQXTjIFP4EfgMqLH7xb+uIKeseaDRNBywYynECeqJB9zippZMvuQFfhfa
Iwf3jw==
-----END CERTIFICATE-----
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAxikTVr9yR+8shnJ2JGzkv+A5gqIbo7OzeMeYDWBB04YqV/pb
1K1lgFFAoo67YVGlps1lnzWYZoDLcufcGXZR+DiSTNqjNNPzclFQjP9fJLNKbSHf
bnHSTxIvYQT7eWuC1RNQ3yOcdTFFy95vgCZ1s/cLbcZNolvuAk1J21+LlBu6r+ys
ivHLDhSQqFGUTimBsA6At9G/VIwROsHdjFApcwg319+6wAnewPcAEA805NETVw8g
aiWVfRgs1LgKOcwcUhJO852olq0olM5tj4EqHBmG+9Hfjz5jXeTELAodrMaOKyho
qZGtWAZ3DHl0bbVi+p89TChzCB/tJBbPLzP4TwIDAQABAoIBAGbX2JaUA567zbL1
YsVi0pGWsKJQueGLGSEdDZgble5O2lkQsWo+l8gx40a6pxtKAZwBS7WGXlMMkwpO
tVdtpfsaeStz6XI4ckepVhHnU5y7hGwBQXGTlx+8g2Rp7o3Es4EcZkN4uvHDocK9
7cZnr3y4QXE2kwIpjewZ6rP08X7qvpYFvYyebFyMlLaKoK57BMcnLtfCxUE66uqu
Mlp4asWJcdyyOodTAyCSqMQ845R8kzkn1ojVMkZgj+sZDkzlyZt2MxZojbCYhRm7
2bOgsrK3inqX0vIcToczFAtp4SKWMzNhW81nOkJ5DoIgKzx5RnfqQIOOmA7PlBCR
wUdA1sECgYEA9fbsmYw2RolvWsoVwt20JYohZ/2zXQfXRWX4CyJtO2bHHwazyqxi
vNcqq/jYHLfmJh4nNpm3rzpvVcWHe725xgAEN9PcWZjL6UMcSrIJXj7rfVgLhnth
wk/QAoGganGFYtPwmjrr8IcfMIGAHNlnCk/C31e7JgfOBfP5mJAf/m8CgYEAzj7X
mYd1r8X54cfeqRikHtApXn2rIUr/FP383dtAuUWsLnRt0slv6heTfjmZWODUri6b
8V2i+cuCGUmxkN70Xsk3ccqnwVdajgWtn+CSyqQ9Y+tlH6h8hJvBiKYCrDxdsF4p
KIqrIQyUNJFxFDogdR+ygjvvjOQVRxzNaSHElCECgYEA5l3niYSGDRiJn+nn6cQG
BqbR1PkLtdUzLT9sytjqn5kKZCe92tQMAjwwLjN6DaO7vfW92misXkUHo7jGxQGU
bjrzuGoIVi5CxW1ioR8QoSGjI5mD6efDTt+7va001p0ORdqk3X7UHkofzylrGRoR
ZNoBdXdQxDTJJFA2dEqAfKcCgYB9O2dKkBgDvSC32db3skClfRxBhekNdC5jHr4W
MHWiig28v3GYFjxgViR29p6Ieyxo/2AtNQAq0UmT9U1efCLCE0gZTkaCfXo81nHQ
rFo1tXiZXWuvx2ykULc5NCRXVOhGmUZAmcLDdJHhQZb6AzmGJNMNhTs1v6Cz52dK
uPhWQQKBgD04pUlqkVsHmJq6Q7Em65r4dddNvV0/U9WcZDOjtehZDtGornsD7QIc
xTo1R4V9aNaoxKC3pxdXVchdWWyjsUQS+FqlhAySL3fjfG/ZDP9lTYrKTwzoKjOD
/GRmmVO/izU+PDy/0UeP34+Cshd1HyO73oYr7LRczYyaq9XTrhnW
-----END RSA PRIVATE KEY-----
